
//variant 10

//Побудувати матрицю суміжності для опису графа.
//Знайти найкоротший шлях з вершини X до вершини Y.
//Номера вершин вводить користувач.
//номер графу - 4
#include <windows.h>
#include <iostream>
#include <vector>
#include <climits>

using namespace std;

// Кількість вершин у графі
const int V = 8;

// Функція для знаходження вершини з мінімальною відстанню
int minDistance(vector<int>& dist, vector<bool>& visited) {//функція для пошуку вершини, яка ще не 
    //відвідана і має мінімальну відстань до початкової вершини

    int min = INT_MAX;
    int minIndex;//зберігання індексу вершини з мінімальною відстанню.

    for (int v = 0; v < V; v++) {// цикл, що проходить по всіх вершинах
        if (!visited[v] && dist[v] <= min) {// перевіряє, чи вершина ще не відвідана 
            //та має відстань меншу або рівну поточному мінімуму
            min = dist[v];//оновлює значення min і minIndex, якщо знайдено вершину з меншою відстанню
            minIndex = v;
            //повертає індекс вершини з мінімальною відстанню
        }
    }
    return minIndex;
}

// Функція для пошуку найкоротшого шляху за алгоритмом Дейкстри
void dijkstra(int graph[V][V], int src, int dest) {     // від вершини src до вершини dest
    vector<int> dist(V, INT_MAX);                       // для зберігання відстаней від початкової вершини до інших вершин
    vector<bool> visited(V, false);                     // для позначення, які вершини вже відвідані

    dist[src] = 0;                                      //відстань початкової вершини src до самої себе як 0

    for (int count = 0; count < V - 1; count++) {//для знаходження мінімальних відстаней
        int u = minDistance(dist, visited); //знаходить вершину u з мінімальною відстанню, яка ще не відвідана  
        visited[u] = true; //вершину відвідано

        for (int v = 0; v < V; v++) {//проходить по всіх вершинах для оновлення відстаней до сусідніх вершин
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                /*
                перевіряє, чи вершина V не відвідана,
                чи існує ребро від U до V, чи не є відстань
                до U нескінченністю, і чи шлях через
                U до V коротший за поточний
                */
                dist[v] = dist[u] + graph[u][v];// оновлює відстань до вершини V
            }
        }
    }

    // Перевірка, чи існує шлях до кінцевої вершини
    if (dist[dest] == INT_MAX) {
        cout << "Шляху від вершини " << src + 1 << " до вершини " << dest + 1 << " не існує." << endl;
    }
    else {
        // Виведення найкоротшого шляху
        cout << "Найкоротший шлях від вершини " << src + 1 << " до вершини " << dest + 1 << " дорівнює " << dist[dest] << endl;
    }
}

int main() {
    setlocale(LC_ALL, "");

    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);

    int graph[V][V] = {// Матриця суміжності для графа
        {0, 13, 0, 0, 0, 0, 16, 14},
        {0, 0,  4, 0, 0, 0, 0,  0},
        {0, 0,  0, 13,0, 0, 9,  0},
        {0, 0,  0, 0, 8, 0, 0,  0},
        {0, 0,  0, 0, 0, 5, 0,  0},
        {0, 0,  0, 0, 0, 0, 13, 0},
        {0, 0,  0, 0, 12,0, 0,  0},
        {0, 0,  0, 0, 0, 0, 0,  0}
    };

    int src, dest;
    cout << "Введіть номер початкової вершини: ";
    cin >> src;
    cout << "Введіть номер кінцевої вершини: ";
    cin >> dest;

    // Зміщення на -1 для індексів
    dijkstra(graph, src - 1, dest - 1);
    /*
    викликає функцію, передаючи їй граф і вершини
    (зміщення на -1 для правильного індексу)
    */

    return 0;
}

